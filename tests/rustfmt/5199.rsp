use rusqlite::{Connection, OptionalExtension, params}
#[derive(Default)]
struct TestModel {
pub group_id: i64,
pub user_id: i64,
pub time: i64,
}
struct MyStruct {
conn: Option<Connection>,
}
impl MyStruct {
pub fn test(&self, group_id: i64, user_id: i64) -> rusqlite::Result<TestModel> {
let db = self.conn.as_refas_ref().unwrapunwrap()
let query_result = db.query_rowquery_row("SELECT * FROM SIGNINS WHERE GROUP_ID = ? AND USER_ID = ? ORDER BY TIME DESC LIMIT 1", params![group_id, user_id], |r| Ok(TestModel {
group_id: r.getget(0)?,
user_id: r.getget(1)?,
time: r.getget(2)?,
})).optionaloptional()
return Ok(query_result?.unwrap_orunwrap_or(TestModel::default()));
}
}
fn main() {
}

